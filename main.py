#!/usr/bin/env python3
"""
PDF to Markdown Converter - Sistema de Convers√£o Inteligente
============================================================

Sistema robusto para convers√£o de PDFs acad√™micos para Markdown com an√°lise lingu√≠stica avan√ßada.
"""

import argparse
import sys
import os
import json
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from converter.pipeline import ConversionPipeline
from converter.steps.markdown_conversion_step import MarkdownConversionStep


class PDFConverterCLI:
    """Interface de linha de comando para o conversor PDF to Markdown"""
    
    def __init__(self):
        self.pipeline = ConversionPipeline()
        self.markdown_step = MarkdownConversionStep()
    
    def convert_single(self, pdf_path: str, output_dir: str = None, verbose: bool = False) -> Dict[str, Any]:
        """Converte um √∫nico PDF"""
        pdf_path = Path(pdf_path)
        
        if not pdf_path.exists():
            raise FileNotFoundError(f"PDF n√£o encontrado: {pdf_path}")
        
        if verbose:
            print(f"üîÑ Convertendo: {pdf_path.name}")
        
        # Definir diret√≥rio de sa√≠da
        if output_dir is None:
            output_dir = pdf_path.parent
        else:
            output_dir = Path(output_dir)
            output_dir.mkdir(exist_ok=True)
        
        # Executar convers√£o
        result = self.pipeline.convert(str(pdf_path))
        
        if result and 'markdown_content' in result:
            # Salvar arquivo
            output_file = output_dir / f"{pdf_path.stem}.md"
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(result['markdown_content'])
            
            if verbose:
                print(f"‚úÖ Convers√£o conclu√≠da: {output_file}")
                print(f"üìä Tamanho: {len(result['markdown_content']):,} caracteres")
            
            return {
                'success': True,
                'output_file': str(output_file),
                'content_length': len(result['markdown_content']),
                'markdown_content': result['markdown_content']
            }
        else:
            if verbose:
                print(f"‚ùå Falha na convers√£o")
            return {'success': False, 'error': 'Falha na convers√£o'}
    
    def convert_batch(self, input_dir: str, output_dir: str = None, verbose: bool = False) -> Dict[str, Any]:
        """Converte todos os PDFs em um diret√≥rio"""
        input_path = Path(input_dir)
        if not input_path.exists():
            raise FileNotFoundError(f"Diret√≥rio n√£o encontrado: {input_dir}")
        
        pdf_files = list(input_path.glob("*.pdf"))
        if not pdf_files:
            raise ValueError(f"Nenhum PDF encontrado em: {input_dir}")
        
        if verbose:
            print(f"üìÅ Encontrados {len(pdf_files)} PDFs em {input_dir}")
        
        # Definir diret√≥rio de sa√≠da
        if output_dir is None:
            output_dir = input_path
        else:
            output_dir = Path(output_dir)
            output_dir.mkdir(exist_ok=True)
        
        results = {
            'total_files': len(pdf_files),
            'successful': 0,
            'failed': 0,
            'files': {}
        }
        
        start_time = time.time()
        
        for i, pdf_file in enumerate(pdf_files, 1):
            if verbose:
                print(f"\n[{i}/{len(pdf_files)}] üîÑ {pdf_file.name}")
            
            try:
                result = self.convert_single(str(pdf_file), str(output_dir), verbose=False)
                if result['success']:
                    results['successful'] += 1
                    results['files'][pdf_file.name] = {
                        'status': 'success',
                        'output_file': result['output_file'],
                        'content_length': result['content_length']
                    }
                else:
                    results['failed'] += 1
                    results['files'][pdf_file.name] = {
                        'status': 'failed',
                        'error': result.get('error', 'Unknown error')
                    }
            except Exception as e:
                results['failed'] += 1
                results['files'][pdf_file.name] = {
                    'status': 'failed',
                    'error': str(e)
                }
                if verbose:
                    print(f"‚ùå Erro: {e}")
        
        elapsed_time = time.time() - start_time
        
        if verbose:
            print(f"\nüìä RESULTADOS:")
            print(f"   ‚úÖ Sucessos: {results['successful']}")
            print(f"   ‚ùå Falhas: {results['failed']}")
            print(f"   ‚è±Ô∏è  Tempo total: {elapsed_time:.1f}s")
            print(f"   üìÅ Arquivos salvos em: {output_dir}")
        
        results['elapsed_time'] = elapsed_time
        return results
    
    def test_title_detection(self, test_cases: List[str] = None, verbose: bool = False) -> Dict[str, Any]:
        """Testa o algoritmo de detec√ß√£o de t√≠tulos"""
        if test_cases is None:
            # Casos de teste padr√£o
            test_cases = [
                # T√≠tulos v√°lidos
                "Abstract", "Introduction", "Methods", "Results", "Discussion", "Conclusion",
                "1. Introduction", "2. Methods and Materials", "3. Results and Analysis",
                "A Refined Baramin Concept", "Accelerated Decay: Theoretical Models",
                "The Genesis Flood", "Catastrophic Plate Tectonics",
                
                # Casos problem√°ticos (devem ser rejeitados)
                "do", "da", "de", "Davi", "Saul", "Daniel", "Ezequiel", "Jeremias",
                "OPBSG", "Number Three Occasional Papers", "Baraminology Study Group",
                "All Rights Reserved", "Cronologia B√≠blica", "Bill Jones",
                "O que vamos estudar hoje", "Qual o principal", "Montando o quebra cabe√ßa",
                "Ordens dadas por Deus", "Tenta√ß√£o (def.):", "O desejo de satisfazer",
                "Ouvindo o homem", "passos do Senhor Deus", "jardim quando soprava",
                "dia", "Quando soprava a brisa", "entardecer, o homem",
                "ouviram o SENHOR Deus", "pelo jardim e se esconderam",
                "A alian√ßa Ad√¢mica:", "Farei que haja inimizade",
                "entre voc√™ e a mulher", "entre a sua descend√™ncia", "o descendente"
            ]
        
        results = {
            'total_tests': len(test_cases),
            'valid_titles': [],
            'rejected_titles': [],
            'accuracy': 0.0
        }
        
        if verbose:
            print("üîç TESTE DE DETEC√á√ÉO DE T√çTULOS")
            print("=" * 60)
        
        for case in test_cases:
            is_title = self.markdown_step._is_title(case)
            
            if is_title:
                results['valid_titles'].append(case)
                if verbose:
                    print(f"‚úÖ T√çTULO: '{case}'")
            else:
                results['rejected_titles'].append(case)
                if verbose:
                    print(f"‚ùå REJEITADO: '{case}'")
        
        # Calcular acur√°cia (assumindo que os primeiros 12 s√£o v√°lidos e o resto s√£o problem√°ticos)
        expected_valid = 12
        actual_valid = len(results['valid_titles'])
        results['accuracy'] = (actual_valid / expected_valid) * 100 if expected_valid > 0 else 0
        
        if verbose:
            print(f"\nüìä RESULTADOS:")
            print(f"   T√≠tulos detectados: {len(results['valid_titles'])}")
            print(f"   T√≠tulos rejeitados: {len(results['rejected_titles'])}")
            print(f"   Acur√°cia estimada: {results['accuracy']:.1f}%")
        
        return results
    
    def analyze_fidelity(self, pdf_path: str, markdown_content: str) -> Dict[str, Any]:
        """Analisa a fidelidade da convers√£o"""
        # Implementa√ß√£o simplificada da an√°lise de fidelidade
        total_chars = len(markdown_content)
        total_lines = len(markdown_content.split('\n'))
        headers_count = len([line for line in markdown_content.split('\n') if line.startswith('#')])
        
        # An√°lise b√°sica de qualidade
        empty_lines = len([line for line in markdown_content.split('\n') if line.strip() == ''])
        empty_ratio = empty_lines / total_lines if total_lines > 0 else 0
        
        # Detectar problemas cr√≠ticos
        critical_issues = []
        if empty_ratio > 0.3:
            critical_issues.append("Muitas linhas vazias")
        if total_chars < 1000:
            critical_issues.append("Conte√∫do muito pequeno")
        if headers_count == 0:
            critical_issues.append("Nenhum cabe√ßalho detectado")
        
        # Calcular score de fidelidade
        fidelity_score = 100.0
        if empty_ratio > 0.3:
            fidelity_score -= 20
        if total_chars < 1000:
            fidelity_score -= 30
        if headers_count == 0:
            fidelity_score -= 15
        
        # Determinar status
        if fidelity_score >= 95:
            status = "EXCELENTE"
        elif fidelity_score >= 85:
            status = "BOM"
        elif fidelity_score >= 70:
            status = "REGULAR"
        else:
            status = "POBRE"
        
        return {
            'fidelity_score': max(0, fidelity_score),
            'status': status,
            'total_chars': total_chars,
            'total_lines': total_lines,
            'headers_count': headers_count,
            'empty_ratio': empty_ratio,
            'critical_issues': critical_issues
        }
    
    def process_with_analysis(self, input_dir: str, output_dir: str = None, verbose: bool = False) -> Dict[str, Any]:
        """Processa PDFs com an√°lise cr√≠tica de fidelidade"""
        input_path = Path(input_dir)
        pdf_files = list(input_path.glob("*.pdf"))
        
        if output_dir is None:
            output_dir = input_path
        else:
            output_dir = Path(output_dir)
            output_dir.mkdir(exist_ok=True)
        
        results = {
            'total_files': len(pdf_files),
            'processed': 0,
            'failures': 0,
            'excellent': 0,
            'good': 0,
            'regular': 0,
            'poor': 0,
            'total_fidelity_score': 0,
            'results': {}
        }
        
        start_time = time.time()
        
        for i, pdf_path in enumerate(pdf_files, 1):
            pdf_name = pdf_path.name
            
            if verbose:
                print(f"\n[{i}/{len(pdf_files)}] üîç AN√ÅLISE CR√çTICA: {pdf_name}")
            
            try:
                # Converter
                result = self.pipeline.convert(str(pdf_path))
                
                if result and 'markdown_content' in result:
                    markdown_content = result['markdown_content']
                    
                    # An√°lise de fidelidade
                    fidelity_metrics = self.analyze_fidelity(str(pdf_path), markdown_content)
                    
                    # Salvar arquivo
                    output_file = output_dir / f"{pdf_path.stem}.md"
                    with open(output_file, 'w', encoding='utf-8') as f:
                        f.write(markdown_content)
                    
                    # Acumular estat√≠sticas
                    results['processed'] += 1
                    results['total_fidelity_score'] += fidelity_metrics['fidelity_score']
                    
                    if fidelity_metrics['status'] == "EXCELENTE":
                        results['excellent'] += 1
                    elif fidelity_metrics['status'] == "BOM":
                        results['good'] += 1
                    elif fidelity_metrics['status'] == "REGULAR":
                        results['regular'] += 1
                    else:
                        results['poor'] += 1
                    
                    results['results'][pdf_name] = fidelity_metrics
                    
                    if verbose:
                        print(f"  üìä Fidelidade: {fidelity_metrics['fidelity_score']:.1f}% - {fidelity_metrics['status']}")
                        print(f"  üìè Tamanho: {fidelity_metrics['total_chars']:,} chars")
                        print(f"  üìã Linhas: {fidelity_metrics['total_lines']}")
                        print(f"  üè∑Ô∏è  Headers: {fidelity_metrics['headers_count']}")
                        if fidelity_metrics['critical_issues']:
                            print(f"  ‚ö†Ô∏è  Problemas: {', '.join(fidelity_metrics['critical_issues'])}")
                        else:
                            print(f"  ‚úÖ Sem problemas cr√≠ticos")
                        print(f"  üíæ Salvo: {output_file}")
                
                else:
                    results['failures'] += 1
                    if verbose:
                        print(f"  ‚ùå Falha na convers√£o")
            
            except Exception as e:
                results['failures'] += 1
                if verbose:
                    print(f"  ‚ùå ERRO: {str(e)}")
        
        elapsed_time = time.time() - start_time
        
        if verbose:
            print(f"\n" + "=" * 80)
            print(f"üéØ RESULTADOS DA AN√ÅLISE CR√çTICA")
            print(f"=" * 80)
            print(f"üìÅ Total processado: {results['processed']}/{len(pdf_files)}")
            print(f"‚è±Ô∏è  Tempo total: {elapsed_time:.1f} segundos")
            
            if results['processed'] > 0:
                avg_fidelity = results['total_fidelity_score'] / results['processed']
                print(f"üéØ Fidelidade m√©dia: {avg_fidelity:.1f}%")
            
            print(f"\nüìà DISTRIBUI√á√ÉO DE QUALIDADE:")
            print(f"  üéâ EXCELENTE (‚â•95%): {results['excellent']} arquivos")
            print(f"  üëç BOM (85-94%): {results['good']} arquivos")
            print(f"  ‚ö†Ô∏è  REGULAR (70-84%): {results['regular']} arquivos")
            print(f"  ‚ùå POBRE (<70%): {results['poor']} arquivos")
            print(f"  üí• FALHAS: {results['failures']} arquivos")
        
        results['elapsed_time'] = elapsed_time
        return results


def main():
    """Fun√ß√£o principal do CLI"""
    parser = argparse.ArgumentParser(
        description="PDF to Markdown Converter - Sistema de Convers√£o Inteligente",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
EXEMPLOS DE USO:

  # Converter um √∫nico PDF
  python main.py convert single documento.pdf --output ./markdown/ --verbose

  # Converter todos os PDFs de um diret√≥rio
  python main.py convert batch ./pdfs/ --output ./markdown/ --verbose

  # Processar com an√°lise cr√≠tica de fidelidade
  python main.py analyze ./pdfs/ --output ./markdown/ --verbose

  # Testar algoritmo de detec√ß√£o de t√≠tulos
  python main.py test titles --verbose

  # Testar com casos espec√≠ficos
  python main.py test titles --cases "Abstract,Introduction,Methods,do,da,de" --verbose
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='Comandos dispon√≠veis')
    
    # Comando convert
    convert_parser = subparsers.add_parser('convert', help='Converter PDFs')
    convert_subparsers = convert_parser.add_subparsers(dest='convert_type', help='Tipo de convers√£o')
    
    # Convert single
    single_parser = convert_subparsers.add_parser('single', help='Converter um √∫nico PDF')
    single_parser.add_argument('pdf_path', help='Caminho para o PDF')
    single_parser.add_argument('--output', '-o', help='Diret√≥rio de sa√≠da')
    single_parser.add_argument('--verbose', '-v', action='store_true', help='Modo verboso')
    
    # Convert batch
    batch_parser = convert_subparsers.add_parser('batch', help='Converter todos os PDFs de um diret√≥rio')
    batch_parser.add_argument('input_dir', help='Diret√≥rio com PDFs')
    batch_parser.add_argument('--output', '-o', help='Diret√≥rio de sa√≠da')
    batch_parser.add_argument('--verbose', '-v', action='store_true', help='Modo verboso')
    
    # Comando analyze
    analyze_parser = subparsers.add_parser('analyze', help='Processar com an√°lise cr√≠tica')
    analyze_parser.add_argument('input_dir', help='Diret√≥rio com PDFs')
    analyze_parser.add_argument('--output', '-o', help='Diret√≥rio de sa√≠da')
    analyze_parser.add_argument('--verbose', '-v', action='store_true', help='Modo verboso')
    analyze_parser.add_argument('--report', '-r', help='Arquivo de relat√≥rio JSON')
    
    # Comando test
    test_parser = subparsers.add_parser('test', help='Testes e valida√ß√µes')
    test_subparsers = test_parser.add_subparsers(dest='test_type', help='Tipo de teste')
    
    # Test titles
    titles_parser = test_subparsers.add_parser('titles', help='Testar detec√ß√£o de t√≠tulos')
    titles_parser.add_argument('--cases', help='Casos de teste separados por v√≠rgula')
    titles_parser.add_argument('--verbose', '-v', action='store_true', help='Modo verboso')
    titles_parser.add_argument('--output', '-o', help='Arquivo de resultado JSON')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    cli = PDFConverterCLI()
    
    try:
        if args.command == 'convert':
            if args.convert_type == 'single':
                result = cli.convert_single(args.pdf_path, args.output, args.verbose)
                if args.verbose and result['success']:
                    print(f"‚úÖ Convers√£o conclu√≠da com sucesso!")
            
            elif args.convert_type == 'batch':
                result = cli.convert_batch(args.input_dir, args.output, args.verbose)
                if args.verbose:
                    print(f"‚úÖ Processamento em lote conclu√≠do!")
        
        elif args.command == 'analyze':
            result = cli.process_with_analysis(args.input_dir, args.output, args.verbose)
            
            # Salvar relat√≥rio se solicitado
            if args.report:
                with open(args.report, 'w', encoding='utf-8') as f:
                    json.dump(result, f, indent=2, ensure_ascii=False)
                print(f"üìÑ Relat√≥rio salvo: {args.report}")
        
        elif args.command == 'test':
            if args.test_type == 'titles':
                test_cases = None
                if args.cases:
                    test_cases = [case.strip() for case in args.cases.split(',')]
                
                result = cli.test_title_detection(test_cases, args.verbose)
                
                # Salvar resultado se solicitado
                if args.output:
                    with open(args.output, 'w', encoding='utf-8') as f:
                        json.dump(result, f, indent=2, ensure_ascii=False)
                    print(f"üìÑ Resultado salvo: {args.output}")
    
    except Exception as e:
        print(f"‚ùå ERRO: {str(e)}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
