#!/usr/bin/env python3
"""
Conversor de PDF para Markdown
Ferramenta CLI para converter artigos cient√≠ficos em PDF para Markdown
"""

import argparse
import sys
from pathlib import Path

from converter.pipeline import ConversionPipeline


def main():
    """Fun√ß√£o principal da CLI"""
    parser = argparse.ArgumentParser(
        description="Conversor de PDF para Markdown - Artigos Cient√≠ficos",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  python main.py artigo.pdf
  python main.py artigo.pdf -o artigo_convertido.md
  python main.py artigo.pdf -d output/personalizado
        """
    )
    
    parser.add_argument(
        'pdf_file',
        help='Caminho para o arquivo PDF a ser convertido'
    )
    
    parser.add_argument(
        '-o', '--output',
        help='Nome do arquivo de sa√≠da (padr√£o: nome_do_pdf.md)'
    )
    
    parser.add_argument(
        '-d', '--output-dir',
        default='output',
        help='Diret√≥rio de sa√≠da (padr√£o: output)'
    )
    
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Modo verboso (mais informa√ß√µes de debug)'
    )
    
    args = parser.parse_args()
    
    # Validar arquivo de entrada
    pdf_path = Path(args.pdf_file)
    if not pdf_path.exists():
        print(f"Erro: Arquivo n√£o encontrado: {pdf_path}")
        sys.exit(1)
    
    if not pdf_path.suffix.lower() == '.pdf':
        print(f"Erro: Arquivo deve ser um PDF: {pdf_path}")
        sys.exit(1)
    
    try:
        # Criar pipeline de convers√£o
        pipeline = ConversionPipeline(args.output_dir)
        
        # Executar convers√£o
        output_path = pipeline.convert(
            str(pdf_path),
            args.output
        )
        
        print(f"\n‚úÖ Convers√£o conclu√≠da com sucesso!")
        print(f"üìÑ Arquivo Markdown: {output_path}")
        print(f"üìÅ Diret√≥rio de sa√≠da: {args.output_dir}")
        
        if args.verbose:
            stats = pipeline.get_statistics()
            print(f"\nüìä Estat√≠sticas:")
            print(f"   - P√°ginas processadas: {stats['total_pages']}")
            print(f"   - Blocos de texto: {stats['text_blocks']}")
            print(f"   - Tabelas extra√≠das: {stats['tables']}")
            print(f"   - Imagens extra√≠das: {stats['images']}")
            print(f"   - Entradas de fonte: {stats['font_info_entries']}")
            print(f"   - Tamanho texto bruto: {stats['raw_text_length']:,} chars")
            print(f"   - Tamanho texto limpo: {stats['cleaned_text_length']:,} chars")
            print(f"   - Tamanho Markdown: {stats['markdown_length']:,} chars")
            print(f"   - Linhas Markdown: {stats['markdown_lines']}")
            print(f"   - M√©todo escolhido: {stats['method_chosen']}")
        
    except Exception as e:
        print(f"‚ùå Erro durante a convers√£o: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
