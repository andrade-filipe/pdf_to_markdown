#!/usr/bin/env python3
"""
Script para analisar o problema de extra√ß√£o de texto
"""

import os
import sys
from pathlib import Path
import fitz
import re

def analyze_extraction_problem():
    """Analisa detalhadamente o problema de extra√ß√£o de texto"""
    
    # Arquivo para testar
    pdf_path = "/home/andrade/Documentos/Meus Ebooks/Genesis: The Correct Timeline/Referencias em PDF/Mount St. Helens and Catastrophism.pdf"
    
    print("üîç AN√ÅLISE DETALHADA DO PROBLEMA DE EXTRA√á√ÉO")
    print("="*60)
    
    doc = fitz.open(pdf_path)
    
    print(f"\nüìÑ ARQUIVO: {Path(pdf_path).name}")
    print(f"üìä P√ÅGINAS: {len(doc)}")
    print("-" * 40)
    
    total_chars = 0
    total_words = 0
    
    # Analisar cada p√°gina individualmente
    for page_num in range(len(doc)):
        page = doc[page_num]
        
        print(f"\nüìÑ P√ÅGINA {page_num + 1}:")
        
        # M√©todo 1: Extra√ß√£o simples
        simple_text = page.get_text()
        simple_chars = len(simple_text)
        simple_words = len(re.findall(r'\b\w+\b', simple_text.lower()))
        
        print(f"   M√©todo 1 (simples): {simple_chars:,} chars, {simple_words:,} palavras")
        
        # M√©todo 2: Extra√ß√£o com dict
        dict_text = ""
        try:
            blocks = page.get_text("dict")
            for block in blocks.get("blocks", []):
                if "lines" in block:
                    for line in block["lines"]:
                        for span in line["spans"]:
                            dict_text += span['text'] + " "
        except:
            dict_text = "Erro na extra√ß√£o dict"
        
        dict_chars = len(dict_text)
        dict_words = len(re.findall(r'\b\w+\b', dict_text.lower()))
        
        print(f"   M√©todo 2 (dict): {dict_chars:,} chars, {dict_words:,} palavras")
        
        # M√©todo 3: Extra√ß√£o com HTML
        html_text = ""
        try:
            html_raw = page.get_text("html")
            html_text = re.sub(r'<[^>]+>', '', html_raw)
        except:
            html_text = "Erro na extra√ß√£o HTML"
        
        html_chars = len(html_text)
        html_words = len(re.findall(r'\b\w+\b', html_text.lower()))
        
        print(f"   M√©todo 3 (HTML): {html_chars:,} chars, {html_words:,} palavras")
        
        # Mostrar amostra do melhor m√©todo
        best_method = "simple"
        best_text = simple_text
        best_chars = simple_chars
        
        if dict_chars > simple_chars:
            best_method = "dict"
            best_text = dict_text
            best_chars = dict_chars
        
        if html_chars > best_chars:
            best_method = "HTML"
            best_text = html_text
            best_chars = html_chars
        
        print(f"   üéØ Melhor m√©todo: {best_method}")
        print(f"   üìù Amostra (primeiros 200 chars):")
        print(f"      {best_text[:200]}...")
        
        # Analisar qualidade do texto
        analyze_text_quality(best_text, f"P√°gina {page_num + 1}")
        
        total_chars += best_chars
        total_words += dict_words  # Usar dict_words como base
    
    doc.close()
    
    print(f"\nüìä RESUMO DA EXTRA√á√ÉO:")
    print(f"   Total de caracteres: {total_chars:,}")
    print(f"   Total de palavras: {total_words:,}")
    
    # Comparar com a convers√£o final
    final_md_path = "/home/andrade/Documentos/Meus Ebooks/Genesis: The Correct Timeline/Referencias em Markdown/Mount St. Helens and Catastrophism.md"
    
    if Path(final_md_path).exists():
        with open(final_md_path, 'r', encoding='utf-8') as f:
            final_content = f.read()
        
        final_chars = len(final_content)
        final_words = len(re.findall(r'\b\w+\b', final_content.lower()))
        
        print(f"\nüìà COMPARA√á√ÉO COM CONVERS√ÉO FINAL:")
        print(f"   Extra√ß√£o: {total_chars:,} chars, {total_words:,} palavras")
        print(f"   Convers√£o final: {final_chars:,} chars, {final_words:,} palavras")
        print(f"   Perda na convers√£o: {(total_chars - final_chars):+,} chars ({(total_chars - final_chars)/total_chars*100:.1f}%)")
        print(f"   Perda de palavras: {(total_words - final_words):+,} palavras ({(total_words - final_words)/total_words*100:.1f}%)")

def analyze_text_quality(text, label):
    """Analisa a qualidade do texto extra√≠do"""
    
    # Detectar problemas comuns
    issues = []
    
    # Verificar se h√° muitas quebras de linha
    lines = text.split('\n')
    if len(lines) > len(text) / 50:  # Muitas linhas para o tamanho do texto
        issues.append("Muitas quebras de linha")
    
    # Verificar se h√° palavras juntas sem espa√ßo
    words_together = len(re.findall(r'[a-z][A-Z]', text))
    if words_together > len(text) / 100:
        issues.append(f"Muitas palavras juntas ({words_together})")
    
    # Verificar se h√° caracteres estranhos
    strange_chars = sum(1 for char in text if ord(char) > 127 and char not in '√°√©√≠√≥√∫√¢√™√Æ√¥√ª√£√µ√ß√†√®√¨√≤√π√§√´√Ø√∂√º√±')
    if strange_chars > len(text) * 0.1:
        issues.append(f"Muitos caracteres estranhos ({strange_chars})")
    
    # Verificar se h√° frases quebradas
    sentences = re.split(r'[.!?]', text)
    broken_sentences = sum(1 for s in sentences if len(s.strip()) < 10 and len(s.strip()) > 0)
    if broken_sentences > len(sentences) * 0.2:
        issues.append("Muitas frases quebradas")
    
    if issues:
        print(f"   ‚ö†Ô∏è Problemas detectados: {', '.join(issues)}")
    else:
        print(f"   ‚úÖ Qualidade do texto boa")

def analyze_specific_page():
    """Analisa uma p√°gina espec√≠fica em detalhes"""
    
    pdf_path = "/home/andrade/Documentos/Meus Ebooks/Genesis: The Correct Timeline/Referencias em PDF/Mount St. Helens and Catastrophism.pdf"
    
    print(f"\nüîç AN√ÅLISE DETALHADA DA P√ÅGINA 3 (mais conte√∫do)")
    print("="*60)
    
    doc = fitz.open(pdf_path)
    page = doc[2]  # P√°gina 3 (√≠ndice 2)
    
    # Extrair usando dict para an√°lise detalhada
    blocks = page.get_text("dict")
    
    print(f"üìä ESTRUTURA DA P√ÅGINA:")
    print(f"   Total de blocos: {len(blocks.get('blocks', []))}")
    
    block_count = 0
    text_accumulator = ""
    
    for block in blocks.get("blocks", []):
        block_count += 1
        
        if block.get("type") == 0:  # texto
            print(f"\n   üìù BLOCO {block_count} (texto):")
            
            for line in block.get("lines", []):
                line_text = ""
                for span in line["spans"]:
                    text = span['text']
                    size = span['size']
                    font = span['font']
                    
                    line_text += text
                    
                    if len(text.strip()) > 0:
                        print(f"      '{text}' (fonte: {font}, tamanho: {size})")
                
                text_accumulator += line_text + "\n"
        
        elif block.get("type") == 1:  # imagem
            print(f"\n   üñºÔ∏è BLOCO {block_count} (imagem)")
    
    doc.close()
    
    print(f"\nüìù TEXTO COMPLETO DA P√ÅGINA 3:")
    print("-" * 40)
    print(text_accumulator)
    print("-" * 40)

def propose_extraction_improvements():
    """Prop√µe melhorias para a extra√ß√£o de texto"""
    
    print(f"\nüí° PROPOSTA DE MELHORIAS PARA EXTRA√á√ÉO")
    print("="*60)
    
    print(f"\nüéØ PROBLEMAS IDENTIFICADOS:")
    print("1. Extra√ß√£o b√°sica n√£o preserva estrutura de par√°grafos")
    print("2. Palavras ficam juntas sem espa√ßos")
    print("3. Frases s√£o quebradas desnecessariamente")
    print("4. Caracteres especiais n√£o s√£o tratados adequadamente")
    
    print(f"\nüîß MELHORIAS PROPOSTAS:")
    print("1. Melhorar o algoritmo de jun√ß√£o de palavras")
    print("2. Implementar detec√ß√£o inteligente de frases")
    print("3. Adicionar tratamento de caracteres especiais")
    print("4. Implementar preserva√ß√£o de estrutura de par√°grafos")
    print("5. Adicionar fallback para diferentes m√©todos de extra√ß√£o")
    
    print(f"\nüìã PLANO DE IMPLEMENTA√á√ÉO:")
    print("1. Modificar TextExtractionStep para usar m√©todo dict como padr√£o")
    print("2. Implementar algoritmo de jun√ß√£o inteligente de spans")
    print("3. Adicionar limpeza de caracteres especiais")
    print("4. Testar com casos problem√°ticos espec√≠ficos")
    print("5. Validar melhorias em conjunto completo")

def main():
    """Fun√ß√£o principal"""
    print("üî¨ AN√ÅLISE DO PROBLEMA DE EXTRA√á√ÉO DE TEXTO")
    print("="*60)
    
    # An√°lises
    analyze_extraction_problem()
    analyze_specific_page()
    propose_extraction_improvements()
    
    print(f"\nüéâ AN√ÅLISE CONCLU√çDA!")
    print("Pr√≥ximo passo: Implementar melhorias na extra√ß√£o")

if __name__ == "__main__":
    main()
