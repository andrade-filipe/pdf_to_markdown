#!/usr/bin/env python3
import fitz
import re

def debug_code_section():
    """Debuga especificamente a se√ß√£o de c√≥digo do PDF exportar-xls"""
    pdf_path = "/home/andrade/Documentos/quantum/pdf/quantum-exportar-xls.pdf"
    
    print("üîç DEBUGANDO SE√á√ÉO DE C√ìDIGO - quantum-exportar-xls.pdf")
    print("=" * 60)
    
    # Extrair texto
    doc = fitz.open(pdf_path)
    raw_text = ""
    for i in range(len(doc)):
        page = doc[i]
        raw_text += page.get_text()
    doc.close()
    
    lines = raw_text.split('\n')
    print(f"Total de linhas: {len(lines)}")
    
    # Encontrar a se√ß√£o "Detalhamento do C√≥digo"
    code_section_start = -1
    for i, line in enumerate(lines):
        if 'Detalhamento do C√≥digo' in line:
            code_section_start = i
            print(f"\nüìç Se√ß√£o 'Detalhamento do C√≥digo' encontrada na linha {i+1}")
            print(f"   Linha: '{line}'")
            break
    
    if code_section_start == -1:
        print("‚ùå Se√ß√£o 'Detalhamento do C√≥digo' n√£o encontrada!")
        return
    
    # Mostrar contexto ao redor da se√ß√£o
    print(f"\nüìã CONTEXTO AO REDOR DA SE√á√ÉO (linhas {code_section_start-5} a {code_section_start+20}):")
    print("-" * 60)
    
    start = max(0, code_section_start - 5)
    end = min(len(lines), code_section_start + 20)
    
    for i in range(start, end):
        marker = ">>> " if i == code_section_start else "    "
        print(f"{marker}{i+1:4d}: '{lines[i]}'")
    
    # Procurar por conte√∫do ap√≥s a se√ß√£o
    print(f"\nüîç PROCURANDO CONTE√öDO AP√ìS A SE√á√ÉO:")
    print("-" * 60)
    
    content_found = False
    for i in range(code_section_start + 1, min(len(lines), code_section_start + 50)):
        line = lines[i].strip()
        if line:
            print(f"   {i+1:4d}: '{line}'")
            content_found = True
        elif content_found:
            # Se encontrou conte√∫do e agora tem linha vazia, pode ser fim da se√ß√£o
            print(f"   {i+1:4d}: (linha vazia - poss√≠vel fim da se√ß√£o)")
            break
    
    if not content_found:
        print("   ‚ùå Nenhum conte√∫do encontrado ap√≥s a se√ß√£o!")
    
    # Verificar se h√° outras se√ß√µes pr√≥ximas
    print(f"\nüîç OUTRAS SE√á√ïES PR√ìXIMAS:")
    print("-" * 60)
    
    for i in range(code_section_start - 10, min(len(lines), code_section_start + 50)):
        line = lines[i].strip()
        if any(section in line for section in ['Resultado Regra de Neg√≥cio', 'Diagrama Regra de Neg√≥cio', 'Sum√°rio de Regras', 'Regras de Neg√≥cio']):
            print(f"   {i+1:4d}: '{line}'")
    
    # Verificar se h√° conte√∫do relacionado ao Excel
    print(f"\nüîç CONTE√öDO RELACIONADO AO EXCEL:")
    print("-" * 60)
    
    excel_content = []
    for i, line in enumerate(lines):
        if any(keyword in line for keyword in ['Excel', 'Export', 'XLS', 'Template', 'Configura√ß√£o']):
            excel_content.append((i+1, line.strip()))
    
    if excel_content:
        print(f"Encontradas {len(excel_content)} linhas com conte√∫do Excel:")
        for line_num, content in excel_content[:10]:  # Mostrar apenas as primeiras 10
            print(f"   {line_num:4d}: '{content}'")
        if len(excel_content) > 10:
            print(f"   ... e mais {len(excel_content) - 10} linhas")
    else:
        print("   ‚ùå Nenhum conte√∫do relacionado ao Excel encontrado!")

if __name__ == "__main__":
    debug_code_section()
