#!/usr/bin/env python3
"""
Script para analisar detalhadamente o conflito de processamento
"""

import os
import sys
from pathlib import Path
import re

# Adicionar o diret√≥rio atual ao path
sys.path.append(str(Path(__file__).parent))

from converter.pipeline import ConversionPipeline

def analyze_processing_steps():
    """Analisa cada step do processamento para identificar conflitos"""
    
    # Arquivo para testar
    pdf_path = "/home/andrade/Documentos/Meus Ebooks/Genesis: The Correct Timeline/Referencias em PDF/Mount St. Helens and Catastrophism.pdf"
    test_output_dir = "/tmp/analyze_conflict"
    
    print("üîç AN√ÅLISE DETALHADA DO PROCESSAMENTO")
    print("="*60)
    
    # Criar pipeline
    pipeline = ConversionPipeline(test_output_dir)
    
    # Interceptar dados entre cada step para an√°lise
    original_data = pipeline.current_data.copy()
    
    print(f"\nüìÑ ARQUIVO DE TESTE: {Path(pdf_path).name}")
    print(f"üìÅ DIRET√ìRIO DE TESTE: {test_output_dir}")
    
    # Simular execu√ß√£o step por step
    pipeline.current_data = {
        'pdf_path': pdf_path,
        'output_dir': test_output_dir
    }
    
    print(f"\nüîÑ SIMULANDO PROCESSAMENTO STEP POR STEP:")
    print("-" * 40)
    
    for i, step in enumerate(pipeline.steps):
        print(f"\n{i+1}. Executando: {step.name}")
        
        try:
            # Executar step
            pipeline.current_data = step.process(pipeline.current_data)
            
            # Analisar dados ap√≥s o step
            analyze_step_output(step.name, pipeline.current_data)
            
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
            break

def analyze_step_output(step_name, data):
    """Analisa a sa√≠da de cada step"""
    
    print(f"   üìä Dados ap√≥s {step_name}:")
    
    if step_name == "MarkdownConversion":
        # Analisar otimiza√ß√£o de par√°grafos
        markdown_content = data.get('markdown_content', '')
        if markdown_content:
            lines = markdown_content.split('\n')
            empty_lines = len([l for l in lines if not l.strip()])
            total_lines = len(lines)
            
            print(f"      - Linhas totais: {total_lines}")
            print(f"      - Linhas vazias: {empty_lines}")
            print(f"      - Taxa de linhas vazias: {empty_lines/total_lines*100:.1f}%")
            
            # Mostrar amostra
            sample = markdown_content[:300] + "..." if len(markdown_content) > 300 else markdown_content
            print(f"      - Amostra: {sample}")
    
    elif step_name == "AdvancedMarkdownConversion":
        # Analisar sele√ß√£o de m√©todo
        method_chosen = data.get('method_chosen', 'unknown')
        all_methods = data.get('all_methods', {})
        
        print(f"      - M√©todo escolhido: {method_chosen}")
        print(f"      - M√©todos dispon√≠veis: {list(all_methods.keys())}")
        
        # Analisar conte√∫do final
        markdown_content = data.get('markdown_content', '')
        if markdown_content:
            lines = markdown_content.split('\n')
            empty_lines = len([l for l in lines if not l.strip()])
            total_lines = len(lines)
            
            print(f"      - Linhas finais: {total_lines}")
            print(f"      - Linhas vazias finais: {empty_lines}")
            print(f"      - Taxa final de linhas vazias: {empty_lines/total_lines*100:.1f}%")
            
            # Mostrar amostra final
            sample = markdown_content[:300] + "..." if len(markdown_content) > 300 else markdown_content
            print(f"      - Amostra final: {sample}")

def analyze_method_compact():
    """Analisa especificamente o m√©todo compact"""
    
    print(f"\nüîç AN√ÅLISE ESPEC√çFICA DO M√âTODO COMPACT")
    print("-" * 40)
    
    # Simular entrada t√≠pica
    sample_input = """# T√≠tulo 1
T√≠tulo 1

Texto da primeira linha que deveria ser juntado
com a segunda linha relacionada.

# T√≠tulo 2
Outro par√°grafo que tamb√©m deveria ser otimizado
mas est√° sendo quebrado desnecessariamente.

Lista de itens:
- Item 1
- Item 2
- Item 3"""
    
    print("üì• ENTRADA SIMULADA:")
    print(sample_input)
    print("-" * 40)
    
    # Simular m√©todo compact
    result = simulate_method_compact(sample_input)
    
    print("üì§ SA√çDA DO M√âTODO COMPACT:")
    print(result)
    print("-" * 40)
    
    # Analisar diferen√ßas
    input_lines = [l for l in sample_input.split('\n') if l.strip()]
    output_lines = [l for l in result.split('\n') if l.strip()]
    input_empty = len([l for l in sample_input.split('\n') if not l.strip()])
    output_empty = len([l for l in result.split('\n') if not l.strip()])
    
    print("üìä COMPARA√á√ÉO:")
    print(f"   - Linhas de entrada: {len(input_lines)}")
    print(f"   - Linhas de sa√≠da: {len(output_lines)}")
    print(f"   - Linhas vazias entrada: {input_empty}")
    print(f"   - Linhas vazias sa√≠da: {output_empty}")
    print(f"   - Mudan√ßa: {(len(output_lines) - len(input_lines)):+d} linhas, {(output_empty - input_empty):+d} vazias")

def simulate_method_compact(content):
    """Simula o m√©todo compact para an√°lise"""
    lines = content.split('\n')
    formatted_lines = []
    
    for line in lines:
        line = line.strip()
        
        if not line:
            continue
        
        # Se √© um t√≠tulo, consolidar t√≠tulos consecutivos
        if line.startswith('#'):
            # Se o √∫ltimo item tamb√©m √© um t√≠tulo, juntar
            if formatted_lines and formatted_lines[-1].startswith('#'):
                # Juntar t√≠tulos consecutivos
                last_title = formatted_lines[-1]
                import re
                clean_last = re.sub(r'^#+\s*', '', last_title)
                clean_current = re.sub(r'^#+\s*', '', line)
                combined_title = f"# {clean_last} {clean_current}".strip()
                formatted_lines[-1] = combined_title
            else:
                formatted_lines.append(line)
        else:
            # Juntar linhas que fazem parte do mesmo contexto
            if formatted_lines and not formatted_lines[-1].startswith('#'):
                # Se a linha anterior n√£o termina com pontua√ß√£o, juntar
                import re
                if not re.search(r'[.!?]$', formatted_lines[-1]):
                    formatted_lines[-1] += ' ' + line
                else:
                    formatted_lines.append(line)
            else:
                formatted_lines.append(line)
    
    return '\n\n'.join(formatted_lines)

def propose_solutions():
    """Prop√µe solu√ß√µes para os problemas identificados"""
    
    print(f"\nüí° SOLU√á√ïES PROPOSTAS")
    print("="*60)
    
    print(f"\nüéØ PROBLEMA 1: CONFLITO DE PROCESSAMENTO")
    print("-" * 40)
    print("O m√©todo compact est√° sobrescrevendo as otimiza√ß√µes do MarkdownConversionStep")
    print("\nüí° SOLU√á√ÉO 1A: Modificar m√©todo compact para preservar otimiza√ß√µes")
    print("   - Adicionar verifica√ß√£o se linhas j√° foram otimizadas")
    print("   - Pular re-processamento se otimiza√ß√£o j√° aplicada")
    print("   - Manter estrutura de par√°grafos otimizada")
    
    print(f"\nüí° SOLU√á√ÉO 1B: Mover otimiza√ß√£o para depois da sele√ß√£o de m√©todo")
    print("   - Aplicar otimiza√ß√£o de par√°grafos ap√≥s escolha do melhor m√©todo")
    print("   - Evitar processamento duplo")
    print("   - Garantir que otimiza√ß√µes sejam preservadas")
    
    print(f"\nüí° SOLU√á√ÉO 1C: Melhorar pontua√ß√£o para m√©todos que preservam otimiza√ß√µes")
    print("   - Adicionar m√©trica de 'preserva√ß√£o de otimiza√ß√µes'")
    print("   - Penalizar m√©todos que quebram estrutura otimizada")
    print("   - Dar b√¥nus para m√©todos que mant√™m melhorias")
    
    print(f"\nüéØ PROBLEMA 2: PONTUA√á√ÉO DE QUALIDADE INCORRETA")
    print("-" * 40)
    print("M√©todo compact recebe score alto mas n√£o melhora conte√∫do real")
    
    print(f"\nüí° SOLU√á√ÉO 2A: Adicionar m√©trica de densidade de conte√∫do")
    print("   - Calcular taxa de linhas vazias vs linhas com conte√∫do")
    print("   - Penalizar m√©todos que geram muitas linhas vazias")
    print("   - Considerar preserva√ß√£o de conte√∫do na pontua√ß√£o")
    
    print(f"\nüí° SOLU√á√ÉO 2B: Implementar teste de qualidade antes/depois")
    print("   - Comparar m√©tricas antes e depois do processamento")
    print("   - Penalizar m√©todos que pioram m√©tricas de qualidade")
    print("   - Ajustar pontua√ß√£o baseado em melhorias reais")
    
    print(f"\nüéØ PROBLEMA 3: PRESERVA√á√ÉO DE CONTE√öDO")
    print("-" * 40)
    print("Taxa de preserva√ß√£o de 47.7% para palavras no caso problem√°tico")
    
    print(f"\nüí° SOLU√á√ÉO 3A: Investigar perda de conte√∫do na extra√ß√£o")
    print("   - Comparar texto extra√≠do vs texto original do PDF")
    print("   - Identificar onde conte√∫do √© perdido")
    print("   - Melhorar algoritmo de extra√ß√£o para casos espec√≠ficos")
    
    print(f"\nüí° SOLU√á√ÉO 3B: Implementar fallback para textos com baixa preserva√ß√£o")
    print("   - Detectar quando preserva√ß√£o < 50%")
    print("   - Usar m√©todos alternativos de extra√ß√£o")
    print("   - Aplicar OCR se necess√°rio")

def recommend_best_approach():
    """Recomenda a melhor abordagem baseada na an√°lise"""
    
    print(f"\nüéØ RECOMENDA√á√ÉO DE ABORDAGEM")
    print("="*60)
    
    print(f"\nü•á ABORDAGEM RECOMENDADA: Solu√ß√£o 1B + 2A")
    print("-" * 40)
    print("1. Mover otimiza√ß√£o para depois da sele√ß√£o de m√©todo")
    print("2. Adicionar m√©trica de densidade de conte√∫do na pontua√ß√£o")
    print("3. Testar com casos espec√≠ficos antes de aplicar globalmente")
    
    print(f"\n‚úÖ VANTAGENS:")
    print("- Evita processamento duplo e conflitante")
    print("- Preserva melhorias em todos os m√©todos")
    print("- Pontua√ß√£o reflete qualidade real do conte√∫do")
    print("- Menor risco de quebrar c√≥digo existente")
    
    print(f"\n‚ö†Ô∏è RISCOS:")
    print("- Pode afetar a sele√ß√£o de m√©todos existente")
    print("- Requer testes extensivos")
    print("- Pode impactar performance")
    
    print(f"\nüìã PLANO DE IMPLEMENTA√á√ÉO:")
    print("1. Implementar m√©trica de densidade de conte√∫do")
    print("2. Mover otimiza√ß√£o para ap√≥s sele√ß√£o de m√©todo")
    print("3. Testar com Mount St. Helens (caso problem√°tico)")
    print("4. Validar com outros casos conhecidos")
    print("5. Aplicar globalmente se validado")

def main():
    """Fun√ß√£o principal"""
    print("üî¨ AN√ÅLISE CR√çTICA DE CONFLITOS DE PROCESSAMENTO")
    print("="*60)
    
    # An√°lises
    analyze_processing_steps()
    analyze_method_compact()
    propose_solutions()
    recommend_best_approach()
    
    print(f"\nüéâ AN√ÅLISE CONCLU√çDA!")
    print("Pr√≥ximo passo: Implementar solu√ß√£o recomendada")

if __name__ == "__main__":
    main()
